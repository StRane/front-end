/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../common";

export interface CharityPoolWithVolatilityProtectionInterface
  extends Interface {
  getFunction(
    nameOrSignature:
      | "autoConvertEnabled"
      | "autoConvertThreshold"
      | "checkRouterLiquidity"
      | "conversionCooldown"
      | "convertEthToUsdc"
      | "donateEth"
      | "donateUsdc"
      | "donationCount"
      | "donations"
      | "donorHistory"
      | "ethDonations"
      | "getBalances"
      | "getConversionStats"
      | "getCurrentTick"
      | "getDonorStats"
      | "getMEVProtectionStatus"
      | "initialize"
      | "lastConversionBlock"
      | "lastConversionTime"
      | "maxPriceDeviation"
      | "maxSlippage"
      | "minBlockDelay"
      | "mockSwapRouter"
      | "owner"
      | "pause"
      | "paused"
      | "renounceOwnership"
      | "totalDonors"
      | "totalEthCollected"
      | "totalEthConverted"
      | "totalUsdcCollected"
      | "totalUsdcFromConversions"
      | "transferOwnership"
      | "unpause"
      | "updateConversionSettings"
      | "updateMEVProtection"
      | "usdcDonations"
      | "usdcToken"
      | "wethToken"
      | "withdrawFunds"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "AutoConversion"
      | "ConversionSettingsUpdated"
      | "EthDonation"
      | "FundsWithdrawn"
      | "Initialized"
      | "MEVProtectionTriggered"
      | "OwnershipTransferred"
      | "Paused"
      | "Unpaused"
      | "UsdcDonation"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "autoConvertEnabled",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "autoConvertThreshold",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "checkRouterLiquidity",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "conversionCooldown",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "convertEthToUsdc",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "donateEth", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "donateUsdc",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "donationCount",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "donations",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "donorHistory",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "ethDonations",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getBalances",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getConversionStats",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getCurrentTick",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getDonorStats",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getMEVProtectionStatus",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [AddressLike, AddressLike, AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "lastConversionBlock",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "lastConversionTime",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "maxPriceDeviation",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "maxSlippage",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "minBlockDelay",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "mockSwapRouter",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(functionFragment: "pause", values?: undefined): string;
  encodeFunctionData(functionFragment: "paused", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "totalDonors",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "totalEthCollected",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "totalEthConverted",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "totalUsdcCollected",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "totalUsdcFromConversions",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "unpause", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "updateConversionSettings",
    values: [BigNumberish, BigNumberish, BigNumberish, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "updateMEVProtection",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "usdcDonations",
    values: [AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "usdcToken", values?: undefined): string;
  encodeFunctionData(functionFragment: "wethToken", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "withdrawFunds",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "autoConvertEnabled",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "autoConvertThreshold",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "checkRouterLiquidity",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "conversionCooldown",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "convertEthToUsdc",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "donateEth", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "donateUsdc", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "donationCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "donations", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "donorHistory",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "ethDonations",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getBalances",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getConversionStats",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCurrentTick",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getDonorStats",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getMEVProtectionStatus",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "lastConversionBlock",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "lastConversionTime",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "maxPriceDeviation",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "maxSlippage",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "minBlockDelay",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "mockSwapRouter",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "pause", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "paused", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalDonors",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalEthCollected",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalEthConverted",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalUsdcCollected",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalUsdcFromConversions",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "unpause", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "updateConversionSettings",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateMEVProtection",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "usdcDonations",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "usdcToken", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "wethToken", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "withdrawFunds",
    data: BytesLike
  ): Result;
}

export namespace AutoConversionEvent {
  export type InputTuple = [
    ethAmount: BigNumberish,
    usdcReceived: BigNumberish,
    timestamp: BigNumberish
  ];
  export type OutputTuple = [
    ethAmount: bigint,
    usdcReceived: bigint,
    timestamp: bigint
  ];
  export interface OutputObject {
    ethAmount: bigint;
    usdcReceived: bigint;
    timestamp: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ConversionSettingsUpdatedEvent {
  export type InputTuple = [
    threshold: BigNumberish,
    slippage: BigNumberish,
    cooldown: BigNumberish
  ];
  export type OutputTuple = [
    threshold: bigint,
    slippage: bigint,
    cooldown: bigint
  ];
  export interface OutputObject {
    threshold: bigint;
    slippage: bigint;
    cooldown: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace EthDonationEvent {
  export type InputTuple = [
    donor: AddressLike,
    amount: BigNumberish,
    timestamp: BigNumberish
  ];
  export type OutputTuple = [donor: string, amount: bigint, timestamp: bigint];
  export interface OutputObject {
    donor: string;
    amount: bigint;
    timestamp: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace FundsWithdrawnEvent {
  export type InputTuple = [
    owner: AddressLike,
    ethAmount: BigNumberish,
    usdcAmount: BigNumberish
  ];
  export type OutputTuple = [
    owner: string,
    ethAmount: bigint,
    usdcAmount: bigint
  ];
  export interface OutputObject {
    owner: string;
    ethAmount: bigint;
    usdcAmount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace InitializedEvent {
  export type InputTuple = [version: BigNumberish];
  export type OutputTuple = [version: bigint];
  export interface OutputObject {
    version: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace MEVProtectionTriggeredEvent {
  export type InputTuple = [user: AddressLike, blockNumber: BigNumberish];
  export type OutputTuple = [user: string, blockNumber: bigint];
  export interface OutputObject {
    user: string;
    blockNumber: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OwnershipTransferredEvent {
  export type InputTuple = [previousOwner: AddressLike, newOwner: AddressLike];
  export type OutputTuple = [previousOwner: string, newOwner: string];
  export interface OutputObject {
    previousOwner: string;
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PausedEvent {
  export type InputTuple = [account: AddressLike];
  export type OutputTuple = [account: string];
  export interface OutputObject {
    account: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace UnpausedEvent {
  export type InputTuple = [account: AddressLike];
  export type OutputTuple = [account: string];
  export interface OutputObject {
    account: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace UsdcDonationEvent {
  export type InputTuple = [
    donor: AddressLike,
    amount: BigNumberish,
    timestamp: BigNumberish
  ];
  export type OutputTuple = [donor: string, amount: bigint, timestamp: bigint];
  export interface OutputObject {
    donor: string;
    amount: bigint;
    timestamp: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface CharityPoolWithVolatilityProtection extends BaseContract {
  connect(runner?: ContractRunner | null): CharityPoolWithVolatilityProtection;
  waitForDeployment(): Promise<this>;

  interface: CharityPoolWithVolatilityProtectionInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  autoConvertEnabled: TypedContractMethod<[], [boolean], "view">;

  autoConvertThreshold: TypedContractMethod<[], [bigint], "view">;

  checkRouterLiquidity: TypedContractMethod<
    [ethAmount: BigNumberish],
    [
      [boolean, bigint, bigint] & {
        sufficient: boolean;
        available: bigint;
        needed: bigint;
      }
    ],
    "view"
  >;

  conversionCooldown: TypedContractMethod<[], [bigint], "view">;

  convertEthToUsdc: TypedContractMethod<
    [ethAmount: BigNumberish],
    [void],
    "nonpayable"
  >;

  donateEth: TypedContractMethod<[], [void], "payable">;

  donateUsdc: TypedContractMethod<[amount: BigNumberish], [void], "nonpayable">;

  donationCount: TypedContractMethod<[arg0: AddressLike], [bigint], "view">;

  donations: TypedContractMethod<
    [arg0: BigNumberish],
    [
      [string, bigint, bigint, bigint] & {
        donor: string;
        ethAmount: bigint;
        usdcAmount: bigint;
        timestamp: bigint;
      }
    ],
    "view"
  >;

  donorHistory: TypedContractMethod<
    [arg0: AddressLike, arg1: BigNumberish],
    [bigint],
    "view"
  >;

  ethDonations: TypedContractMethod<[arg0: AddressLike], [bigint], "view">;

  getBalances: TypedContractMethod<
    [],
    [[bigint, bigint] & { ethBalance: bigint; usdcBalance: bigint }],
    "view"
  >;

  getConversionStats: TypedContractMethod<
    [],
    [
      [bigint, bigint, bigint, boolean] & {
        totalConverted: bigint;
        totalUsdcFromConv: bigint;
        currentThreshold: bigint;
        isEnabled: boolean;
      }
    ],
    "view"
  >;

  getCurrentTick: TypedContractMethod<[], [bigint], "view">;

  getDonorStats: TypedContractMethod<
    [donor: AddressLike],
    [
      [bigint, bigint, bigint] & {
        ethTotal: bigint;
        usdcTotal: bigint;
        donationCountTotal: bigint;
      }
    ],
    "view"
  >;

  getMEVProtectionStatus: TypedContractMethod<
    [user: AddressLike],
    [
      [bigint, bigint, boolean] & {
        lastBlock: bigint;
        currentBlock: bigint;
        canConvert: boolean;
      }
    ],
    "view"
  >;

  initialize: TypedContractMethod<
    [
      _usdcToken: AddressLike,
      _wethToken: AddressLike,
      _mockSwapRouter: AddressLike,
      _owner: AddressLike
    ],
    [void],
    "nonpayable"
  >;

  lastConversionBlock: TypedContractMethod<
    [arg0: AddressLike],
    [bigint],
    "view"
  >;

  lastConversionTime: TypedContractMethod<[], [bigint], "view">;

  maxPriceDeviation: TypedContractMethod<[], [bigint], "view">;

  maxSlippage: TypedContractMethod<[], [bigint], "view">;

  minBlockDelay: TypedContractMethod<[], [bigint], "view">;

  mockSwapRouter: TypedContractMethod<[], [string], "view">;

  owner: TypedContractMethod<[], [string], "view">;

  pause: TypedContractMethod<[], [void], "nonpayable">;

  paused: TypedContractMethod<[], [boolean], "view">;

  renounceOwnership: TypedContractMethod<[], [void], "nonpayable">;

  totalDonors: TypedContractMethod<[], [bigint], "view">;

  totalEthCollected: TypedContractMethod<[], [bigint], "view">;

  totalEthConverted: TypedContractMethod<[], [bigint], "view">;

  totalUsdcCollected: TypedContractMethod<[], [bigint], "view">;

  totalUsdcFromConversions: TypedContractMethod<[], [bigint], "view">;

  transferOwnership: TypedContractMethod<
    [newOwner: AddressLike],
    [void],
    "nonpayable"
  >;

  unpause: TypedContractMethod<[], [void], "nonpayable">;

  updateConversionSettings: TypedContractMethod<
    [
      _threshold: BigNumberish,
      _maxSlippage: BigNumberish,
      _cooldown: BigNumberish,
      _enabled: boolean
    ],
    [void],
    "nonpayable"
  >;

  updateMEVProtection: TypedContractMethod<
    [_minBlockDelay: BigNumberish, _maxPriceDeviation: BigNumberish],
    [void],
    "nonpayable"
  >;

  usdcDonations: TypedContractMethod<[arg0: AddressLike], [bigint], "view">;

  usdcToken: TypedContractMethod<[], [string], "view">;

  wethToken: TypedContractMethod<[], [string], "view">;

  withdrawFunds: TypedContractMethod<[], [void], "nonpayable">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "autoConvertEnabled"
  ): TypedContractMethod<[], [boolean], "view">;
  getFunction(
    nameOrSignature: "autoConvertThreshold"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "checkRouterLiquidity"
  ): TypedContractMethod<
    [ethAmount: BigNumberish],
    [
      [boolean, bigint, bigint] & {
        sufficient: boolean;
        available: bigint;
        needed: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "conversionCooldown"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "convertEthToUsdc"
  ): TypedContractMethod<[ethAmount: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "donateEth"
  ): TypedContractMethod<[], [void], "payable">;
  getFunction(
    nameOrSignature: "donateUsdc"
  ): TypedContractMethod<[amount: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "donationCount"
  ): TypedContractMethod<[arg0: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "donations"
  ): TypedContractMethod<
    [arg0: BigNumberish],
    [
      [string, bigint, bigint, bigint] & {
        donor: string;
        ethAmount: bigint;
        usdcAmount: bigint;
        timestamp: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "donorHistory"
  ): TypedContractMethod<
    [arg0: AddressLike, arg1: BigNumberish],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "ethDonations"
  ): TypedContractMethod<[arg0: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "getBalances"
  ): TypedContractMethod<
    [],
    [[bigint, bigint] & { ethBalance: bigint; usdcBalance: bigint }],
    "view"
  >;
  getFunction(
    nameOrSignature: "getConversionStats"
  ): TypedContractMethod<
    [],
    [
      [bigint, bigint, bigint, boolean] & {
        totalConverted: bigint;
        totalUsdcFromConv: bigint;
        currentThreshold: bigint;
        isEnabled: boolean;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "getCurrentTick"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getDonorStats"
  ): TypedContractMethod<
    [donor: AddressLike],
    [
      [bigint, bigint, bigint] & {
        ethTotal: bigint;
        usdcTotal: bigint;
        donationCountTotal: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "getMEVProtectionStatus"
  ): TypedContractMethod<
    [user: AddressLike],
    [
      [bigint, bigint, boolean] & {
        lastBlock: bigint;
        currentBlock: bigint;
        canConvert: boolean;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "initialize"
  ): TypedContractMethod<
    [
      _usdcToken: AddressLike,
      _wethToken: AddressLike,
      _mockSwapRouter: AddressLike,
      _owner: AddressLike
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "lastConversionBlock"
  ): TypedContractMethod<[arg0: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "lastConversionTime"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "maxPriceDeviation"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "maxSlippage"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "minBlockDelay"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "mockSwapRouter"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "pause"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "paused"
  ): TypedContractMethod<[], [boolean], "view">;
  getFunction(
    nameOrSignature: "renounceOwnership"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "totalDonors"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "totalEthCollected"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "totalEthConverted"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "totalUsdcCollected"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "totalUsdcFromConversions"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "transferOwnership"
  ): TypedContractMethod<[newOwner: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "unpause"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "updateConversionSettings"
  ): TypedContractMethod<
    [
      _threshold: BigNumberish,
      _maxSlippage: BigNumberish,
      _cooldown: BigNumberish,
      _enabled: boolean
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "updateMEVProtection"
  ): TypedContractMethod<
    [_minBlockDelay: BigNumberish, _maxPriceDeviation: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "usdcDonations"
  ): TypedContractMethod<[arg0: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "usdcToken"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "wethToken"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "withdrawFunds"
  ): TypedContractMethod<[], [void], "nonpayable">;

  getEvent(
    key: "AutoConversion"
  ): TypedContractEvent<
    AutoConversionEvent.InputTuple,
    AutoConversionEvent.OutputTuple,
    AutoConversionEvent.OutputObject
  >;
  getEvent(
    key: "ConversionSettingsUpdated"
  ): TypedContractEvent<
    ConversionSettingsUpdatedEvent.InputTuple,
    ConversionSettingsUpdatedEvent.OutputTuple,
    ConversionSettingsUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "EthDonation"
  ): TypedContractEvent<
    EthDonationEvent.InputTuple,
    EthDonationEvent.OutputTuple,
    EthDonationEvent.OutputObject
  >;
  getEvent(
    key: "FundsWithdrawn"
  ): TypedContractEvent<
    FundsWithdrawnEvent.InputTuple,
    FundsWithdrawnEvent.OutputTuple,
    FundsWithdrawnEvent.OutputObject
  >;
  getEvent(
    key: "Initialized"
  ): TypedContractEvent<
    InitializedEvent.InputTuple,
    InitializedEvent.OutputTuple,
    InitializedEvent.OutputObject
  >;
  getEvent(
    key: "MEVProtectionTriggered"
  ): TypedContractEvent<
    MEVProtectionTriggeredEvent.InputTuple,
    MEVProtectionTriggeredEvent.OutputTuple,
    MEVProtectionTriggeredEvent.OutputObject
  >;
  getEvent(
    key: "OwnershipTransferred"
  ): TypedContractEvent<
    OwnershipTransferredEvent.InputTuple,
    OwnershipTransferredEvent.OutputTuple,
    OwnershipTransferredEvent.OutputObject
  >;
  getEvent(
    key: "Paused"
  ): TypedContractEvent<
    PausedEvent.InputTuple,
    PausedEvent.OutputTuple,
    PausedEvent.OutputObject
  >;
  getEvent(
    key: "Unpaused"
  ): TypedContractEvent<
    UnpausedEvent.InputTuple,
    UnpausedEvent.OutputTuple,
    UnpausedEvent.OutputObject
  >;
  getEvent(
    key: "UsdcDonation"
  ): TypedContractEvent<
    UsdcDonationEvent.InputTuple,
    UsdcDonationEvent.OutputTuple,
    UsdcDonationEvent.OutputObject
  >;

  filters: {
    "AutoConversion(uint256,uint256,uint256)": TypedContractEvent<
      AutoConversionEvent.InputTuple,
      AutoConversionEvent.OutputTuple,
      AutoConversionEvent.OutputObject
    >;
    AutoConversion: TypedContractEvent<
      AutoConversionEvent.InputTuple,
      AutoConversionEvent.OutputTuple,
      AutoConversionEvent.OutputObject
    >;

    "ConversionSettingsUpdated(uint256,uint256,uint256)": TypedContractEvent<
      ConversionSettingsUpdatedEvent.InputTuple,
      ConversionSettingsUpdatedEvent.OutputTuple,
      ConversionSettingsUpdatedEvent.OutputObject
    >;
    ConversionSettingsUpdated: TypedContractEvent<
      ConversionSettingsUpdatedEvent.InputTuple,
      ConversionSettingsUpdatedEvent.OutputTuple,
      ConversionSettingsUpdatedEvent.OutputObject
    >;

    "EthDonation(address,uint256,uint256)": TypedContractEvent<
      EthDonationEvent.InputTuple,
      EthDonationEvent.OutputTuple,
      EthDonationEvent.OutputObject
    >;
    EthDonation: TypedContractEvent<
      EthDonationEvent.InputTuple,
      EthDonationEvent.OutputTuple,
      EthDonationEvent.OutputObject
    >;

    "FundsWithdrawn(address,uint256,uint256)": TypedContractEvent<
      FundsWithdrawnEvent.InputTuple,
      FundsWithdrawnEvent.OutputTuple,
      FundsWithdrawnEvent.OutputObject
    >;
    FundsWithdrawn: TypedContractEvent<
      FundsWithdrawnEvent.InputTuple,
      FundsWithdrawnEvent.OutputTuple,
      FundsWithdrawnEvent.OutputObject
    >;

    "Initialized(uint64)": TypedContractEvent<
      InitializedEvent.InputTuple,
      InitializedEvent.OutputTuple,
      InitializedEvent.OutputObject
    >;
    Initialized: TypedContractEvent<
      InitializedEvent.InputTuple,
      InitializedEvent.OutputTuple,
      InitializedEvent.OutputObject
    >;

    "MEVProtectionTriggered(address,uint256)": TypedContractEvent<
      MEVProtectionTriggeredEvent.InputTuple,
      MEVProtectionTriggeredEvent.OutputTuple,
      MEVProtectionTriggeredEvent.OutputObject
    >;
    MEVProtectionTriggered: TypedContractEvent<
      MEVProtectionTriggeredEvent.InputTuple,
      MEVProtectionTriggeredEvent.OutputTuple,
      MEVProtectionTriggeredEvent.OutputObject
    >;

    "OwnershipTransferred(address,address)": TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
    OwnershipTransferred: TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;

    "Paused(address)": TypedContractEvent<
      PausedEvent.InputTuple,
      PausedEvent.OutputTuple,
      PausedEvent.OutputObject
    >;
    Paused: TypedContractEvent<
      PausedEvent.InputTuple,
      PausedEvent.OutputTuple,
      PausedEvent.OutputObject
    >;

    "Unpaused(address)": TypedContractEvent<
      UnpausedEvent.InputTuple,
      UnpausedEvent.OutputTuple,
      UnpausedEvent.OutputObject
    >;
    Unpaused: TypedContractEvent<
      UnpausedEvent.InputTuple,
      UnpausedEvent.OutputTuple,
      UnpausedEvent.OutputObject
    >;

    "UsdcDonation(address,uint256,uint256)": TypedContractEvent<
      UsdcDonationEvent.InputTuple,
      UsdcDonationEvent.OutputTuple,
      UsdcDonationEvent.OutputObject
    >;
    UsdcDonation: TypedContractEvent<
      UsdcDonationEvent.InputTuple,
      UsdcDonationEvent.OutputTuple,
      UsdcDonationEvent.OutputObject
    >;
  };
}
